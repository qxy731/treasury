<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd">

	<!-- 纯粹的JDBC的事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- JTA事务管理器，使用该选项时候，必须使用一个容器管理的DataSource -->
	<!--
		<bean id="txManager"
		class="org.springframework.transaction.jta.JtaTransactionManager"/>
	-->

	<!-- spring声明式事务的配置，以下为spring的AOP事务管理的增强部分 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 需要由交给spring的aop来进行代理的方法的集合，如果应用有自己的方法需有由spring来进行事务控制必须添加方法-->

			<!-- 读取数据方法，一般采用只读事务-->
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="criteria*" read-only="true" />
			<tx:method name="*Init*" read-only="true"/>

			<!--其他方法，如save，update，insert等对数据库进行写入操作的方法，当产生ServiceException进行回滚 -->
			<tx:method name="init*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*insert*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*update*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*save*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*add*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*create*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*del*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*undel*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*remove*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*batchCommit*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="syn*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*Change*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*change*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="start*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*commit*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="reject*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*Update*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*Insert*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*Delete*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*Save*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="*Modify*" read-only="false" rollback-for="ServiceException" />
			<tx:method name="affirm" read-only="false" rollback-for="ServiceException" />
			<tx:method name="repeal" read-only="false" rollback-for="ServiceException" />
			<tx:method name="complete" read-only="false" rollback-for="ServiceException" />
			<tx:method name="allot*" read-only="false" rollback-for="ServiceException" />
			
		</tx:attributes>
	</tx:advice>

	<!--  Spring采用AOP进行事务控制,这里指定了凡是实现了以Service结尾接口中的所有方法需要由事务进行控制 -->
	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(* *..*Service.*(..))" />
		<aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice" />
	</aop:config>

	<!-- 特定的应用服务器使用JTA事务时的扩展 -->
	<!-- WebLogic 7.0以上版本使用下面的transactionManager -->
	<!--
		<bean id="txManager"
		class="org.springframework.transaction.jta.WebLogicJtaTransactionManager"/>
	-->

	<!-- 使用Websphere的打开下面的配置-->
	<!--
		<bean id="websphereTransactionManager"
		class="org.springframework.transaction.jta.WebSphereTransactionManagerFactoryBean"/>

		<bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager">		
			<property name="transactionManager"> <ref bean="websphereTransactionManager"/> </property>
		</bean>
	-->
</beans>
